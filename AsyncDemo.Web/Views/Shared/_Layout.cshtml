@using AsyncDemo.Web.Models;
@using System.Reflection;

@{
    var currentYear = DateTime.Now.Year.ToString();
    var status = new ApplicationStatus(Assembly.GetExecutingAssembly());
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="AsyncDemo.Web - A showcase of async programming features">
    <meta name="author" content="Mark Hazleton">
    <title>@ViewData["Title"] - AsyncDemo.Web</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"
        id="theme-link">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <!-- Custom CSS - this link will be disabled when using non-default themes -->
    <link rel="stylesheet" href="~/css/site.min.css" asp-append-version="true" id="custom-styles" />
    
    <style>
        /* Essential style for fixed navbar - avoid complex overrides */
        body {
            padding-top: 60px;
        }
    </style>
    
    @RenderSection("HeadScripts", required: false)
</head>

<body>
    <!-- Standard Bootstrap 5 Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary fixed-top">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="bi bi-lightning-charge-fill me-2"></i>AsyncDemo.Web
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/polly">
                            <i class="bi bi-shield-shaded me-1"></i>Polly Demo
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/openweather">
                            <i class="bi bi-cloud-sun me-1"></i>Open Weather
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/bulkcalls">
                            <i class="bi bi-collection me-1"></i>Bulk Calls
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/swagger">
                            <i class="bi bi-braces me-1"></i>API
                        </a>
                    </li>
                    <!-- Theme Switcher Dropdown -->
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="theme-button" role="button"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-palette me-1"></i>Theme
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end" id="theme-dropdown"
                            aria-labelledby="theme-button">
                            <!-- Themes will be populated by JavaScript -->
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <main class="container py-4">
        @RenderBody()
    </main>

    @await Html.PartialAsync("_Footer")

    <!-- Bootstrap 5 JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS (includes theme-switcher) -->
    <script src="~/js/site.min.js" asp-append-version="true"></script>

    @RenderSection("Scripts", required: false)

    <!-- Display TempData messages as toast notifications -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Process TempData messages
            @if (TempData["BulkCallSuccess"] != null)
            {
                <text>
                    if (window.toastr) {
                        const successOpId = window.asyncStats ? window.asyncStats.startOperation('Bulk API Test') : null;

                        toastr.success('@TempData["BulkCallSuccess"]', 'Success', {
                            closeButton: true,
                            progressBar: true,
                            timeOut: 5000
                        });

                        if (window.asyncStats && successOpId) {
                            setTimeout(() => {
                                window.asyncStats.completeOperation(successOpId, true, '@TempData["BulkCallSuccess"]');
                            }, 500);
                        }
                    }
                </text>
            }

            @if (TempData["BulkCallError"] != null)
            {
                <text>
                    if (window.toastr) {
                        const errorOpId = window.asyncStats ? window.asyncStats.startOperation('Bulk API Test') : null;

                        toastr.error('@TempData["BulkCallError"]', 'Error', {
                            closeButton: true,
                            progressBar: true,
                            timeOut: 8000
                        });

                        if (window.asyncStats && errorOpId) {
                            setTimeout(() => {
                                window.asyncStats.completeOperation(errorOpId, false, '@TempData["BulkCallError"]');
                            }, 500);
                        }
                    }
                </text>
            }
        });
    </script>
</body>

</html>
